{"version":3,"sources":["app/currency/types.js","app/currency/actions.js","components/CurrencyConverter.js","app/transactions/types.js","app/transactions/actions.js","components/Transaction.js","components/Transactions.js","components/AddTransaction.js","App.js","serviceWorker.js","app/currency/index.js","app/currency/reducers.js","app/transactions/reducers.js","app/transactions/index.js","reducers.js","store.js","index.js"],"names":["item","type","types","CurencyConverter","currency","useSelector","state","useState","value","setValue","dispatch","useDispatch","onSubmit","e","preventDefault","actions","className","name","placeholder","onChange","target","id","cur","Transaction","props","transaction","currency_converted","index","scope","onClick","handleRemove","Transactions","transactions","exchangeRate","getGreatestValue","sort","a","b","slice","sumCurrency","reduce","sum","parseInt","sumCurrencyConvertet","parseFloat","useEffect","action","length","map","key","toFixed","AddTransaction","setTransaction","currencyConverter","handleChange","required","App","Boolean","window","location","hostname","match","currencyReducers","INITIAL_STATE","transactionsReducer","filter","data","i","rootReducers","combineReducers","currencyReducer","store","createStore","composeWithDevTools","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ad266bbd.chunk.js","sourcesContent":["const ADD_CURRENCY = \"ADD_CURRENCY\";\r\n\r\nexport default { ADD_CURRENCY };\r\n","import types from \"./types\";\r\n\r\nconst addCurrency = item => ({ type: types.ADD_CURRENCY, item });\r\n\r\nexport default { addCurrency };\r\n","import React, { useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport actions from \"../app/currency/actions\";\r\nimport \"./CurrencyConverter.scss\";\r\n\r\nconst CurencyConverter = () => {\r\n  const currency = useSelector(state => state.currency);\r\n  const [value, setValue] = useState(currency);\r\n  const dispatch = useDispatch();\r\n  const handleChange = e => {\r\n    setValue(e.target.value);\r\n  };\r\n\r\n  const add = e => {\r\n    e.preventDefault();\r\n    dispatch(actions.addCurrency(value));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={add}>\r\n        <div className=\"container-fluid px-0\">\r\n          <div className=\"row no-gutters\">\r\n            <div className=\"col-md-9\">\r\n              <input\r\n                className=\"currency-input\"\r\n                type=\"text\"\r\n                name=\"currency\"\r\n                placeholder=\"define currency\"\r\n                value={value}\r\n                onChange={handleChange}\r\n              />\r\n            </div>\r\n            <div className=\"col-md-3\">\r\n              <button className=\"add-exchange\" type=\"submit\">\r\n                exchange\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </form>\r\n\r\n      <div className=\"container-fluid px-0\">\r\n        <div className=\"row no-gutters\">\r\n          <div className=\"col\">\r\n            <p className=\"exchange-rate\">1€ = {currency}zł</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CurencyConverter;\r\n","const ADD_TRANSACTION = \"ADD_TRANSACTION\";\r\nconst DELETE_TRANSACTION = \"DELETE_TRANSACTION\";\r\nconst CHANGE_TRANSACTION = \"CHANGE_TRANSACTION\";\r\n\r\nexport default {\r\n  ADD_TRANSACTION,\r\n  DELETE_TRANSACTION,\r\n  CHANGE_TRANSACTION\r\n};\r\n","import types from \"./types\";\r\n\r\nconst add = item => ({ type: types.ADD_TRANSACTION, item });\r\n\r\nconst remove = id => ({ type: types.DELETE_TRANSACTION, id });\r\n\r\nconst changeCurrency = cur => ({\r\n  type: types.CHANGE_TRANSACTION,\r\n  cur\r\n});\r\n\r\nexport default { add, remove, changeCurrency };\r\n","import React from \"react\";\r\nimport \"./Transaction.scss\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport actions from \"../app/transactions/actions\";\r\n\r\nconst Transaction = props => {\r\n  const { name, currency, currency_converted } = props.transaction;\r\n  const { index } = props;\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const handleRemove = (e, index) => {\r\n    dispatch(actions.remove(index));\r\n  };\r\n  return (\r\n    <>\r\n      <th scope=\"row\">{index + 1}.</th>\r\n      <td>{name}</td>\r\n      <td>{currency}€</td>\r\n      <td>{currency_converted}zł</td>\r\n      <td className=\"btn-container\">\r\n        <button className=\"remove-btn\" onClick={e => handleRemove(e, index)}>\r\n          Remove\r\n        </button>\r\n      </td>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Transaction;\r\n","import React, { useEffect } from \"react\";\r\nimport \"./Transactions.scss\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport action from \"../app/transactions/actions\";\r\nimport Transaction from \"./Transaction\";\r\n\r\nconst Transactions = () => {\r\n  const transactions = useSelector(state => state.transactions);\r\n  const exchangeRate = useSelector(state => state.currency);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const getGreatestValue = [...transactions]\r\n    .sort((a, b) => {\r\n      if (a.currency < b.currency) {\r\n        return 1;\r\n      } else {\r\n        return -1;\r\n      }\r\n    })\r\n    .slice(0, 1);\r\n\r\n  const sumCurrency = [...transactions].reduce(\r\n    (sum, { currency }) => sum + parseInt(currency),\r\n    0\r\n  );\r\n  const sumCurrencyConvertet = [...transactions].reduce(\r\n    (sum, { currency_converted }) => sum + parseFloat(currency_converted),\r\n    0\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch(action.changeCurrency(exchangeRate));\r\n  }, [dispatch, exchangeRate]);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"container-fliud mt-5 px-0\">\r\n        <div className=\"row no-gutters\">\r\n          <div className=\"col-md-8\">\r\n            {transactions.length > 0 && (\r\n              <div className=\"table-responsive-md w-100 d-block d-md-table\">\r\n                <table className=\"table table-hover table-transactions\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th scope=\"col\"></th>\r\n                      <th scope=\"col\">Name</th>\r\n                      <th scope=\"col\">€</th>\r\n                      <th scope=\"col\">PLN</th>\r\n                      <th></th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {transactions &&\r\n                      transactions.map((transaction, index) => (\r\n                        <tr className=\"hover-items\" key={index}>\r\n                          <Transaction\r\n                            transaction={transaction}\r\n                            index={index}\r\n                          />\r\n                        </tr>\r\n                      ))}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            )}\r\n          </div>\r\n          <div className=\"col-md-4\">\r\n            {getGreatestValue.length > 0 && (\r\n              <div className=\"largest-transaction\">\r\n                <h2 className=\"largest-transaction__title\">\r\n                  largest transaction\r\n                </h2>\r\n                <div>\r\n                  <p className=\"largest-transaction__item\">\r\n                    <span> Name:</span>\r\n                    <span>{getGreatestValue[0].name}</span>{\" \"}\r\n                  </p>\r\n                  <p className=\"largest-transaction__item\">\r\n                    <span>Amount in €:</span>\r\n                    <span>{getGreatestValue[0].currency}</span>{\" \"}\r\n                  </p>\r\n                  <p className=\"largest-transaction__item\">\r\n                    <span>Amount in PLN:</span>\r\n                    <span>{getGreatestValue[0].currency_converted}</span>\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"container-fliud mt-5 px-0\">\r\n        <div className=\"row no-gutters\">\r\n          <div className=\"col\">\r\n            {transactions.length > 0 && (\r\n              <div className=\"all-transactions\">\r\n                <h2 className=\"all-transactions__title\">\r\n                  the sum of all transactions\r\n                </h2>\r\n                <div className=\"all-transactions__item\">\r\n                  <p>\r\n                    <span>All transactions:</span>\r\n                    <span>{transactions.length}</span>\r\n                  </p>\r\n                  <p>\r\n                    <span>sum in euros: </span>\r\n                    <span>{sumCurrency}</span>\r\n                  </p>\r\n                  <p>\r\n                    <span> sum in PLN:</span>\r\n                    <span>{sumCurrencyConvertet.toFixed(2)}</span>\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Transactions;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./AddTransaction.scss\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport actions from \"../app/transactions/actions\";\r\n\r\nconst AddTransaction = () => {\r\n  const [transaction, setTransaction] = useState({\r\n    name: \"\",\r\n    currency: 0,\r\n    currency_converted: null\r\n  });\r\n\r\n  const currencyConverter = useSelector(state => state.currency);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const handleChange = e => {\r\n    setTransaction({\r\n      ...transaction,\r\n      [e.target.name]: e.target.value\r\n    });\r\n  };\r\n  useEffect(() => {\r\n    setTransaction(transaction => ({\r\n      ...transaction,\r\n      currency_converted: (transaction.currency * currencyConverter).toFixed(2)\r\n    }));\r\n  }, [currencyConverter, transaction.currency]);\r\n\r\n  const addTransaction = e => {\r\n    e.preventDefault();\r\n    dispatch(actions.add(transaction));\r\n    setTransaction({ name: \"\", currency: 0, currency_converted: null });\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={addTransaction}>\r\n      <div className=\"container-fluid px-0\">\r\n        <div className=\"row no-gutters\">\r\n          <div className=\"col\">\r\n            <input\r\n              className=\"transaction-input\"\r\n              type=\"text\"\r\n              name=\"name\"\r\n              placeholder=\"define name\"\r\n              value={transaction.name}\r\n              onChange={handleChange}\r\n              required\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"row no-gutters\">\r\n          <div className=\"col-md-9\">\r\n            <input\r\n              className=\"transaction-input\"\r\n              type=\"number\"\r\n              name=\"currency\"\r\n              placeholder=\"Enter currency\"\r\n              value={transaction.currency === 0 ? \"\" : transaction.currency}\r\n              onChange={handleChange}\r\n              required\r\n            />\r\n          </div>\r\n          <div className=\"col-md-3\">\r\n            <button className=\"add-transaction\" type=\"submit\">\r\n              Add Transaction\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default AddTransaction;\r\n","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.scss\";\nimport CurrencyConverter from \"./components/CurrencyConverter\";\nimport Transactions from \"./components/Transactions\";\nimport AddTransaction from \"./components/AddTransaction\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>currency converter</h1>\n      <CurrencyConverter />\n      <AddTransaction />\n      <Transactions />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import currencyReducers from \"./reducers\";\r\nexport { default as currencyType } from \"./types\";\r\nexport { default as currencyAction } from \"./actions\";\r\n\r\nexport default currencyReducers;\r\n","import types from \"./types\";\r\n\r\nconst INITIAL_STATE = 4.27;\r\n\r\nconst currencyReducers = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case types.ADD_CURRENCY:\r\n      return action.item;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default currencyReducers;\r\n","import types from \"./types\";\r\n\r\nconst INITIAL_STATE = [\r\n  { name: \"waluta 1\", currency: 45, currency_converted: 200 },\r\n  { name: \"waluta 2\", currency: 56, currency_converted: 20 },\r\n  { name: \"waluta 3\", currency: 79, currency_converted: 20 },\r\n  { name: \"waluta 4\", currency: 58, currency_converted: 20 },\r\n  { name: \"waluta 5\", currency: 4, currency_converted: 20 },\r\n  { name: \"waluta 6\", currency: 23, currency_converted: 20 },\r\n  { name: \"waluta 7\", currency: 180, currency_converted: 20 }\r\n];\r\n\r\nconst transactionsReducers = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case types.ADD_TRANSACTION:\r\n      return [...state, action.item];\r\n    case types.DELETE_TRANSACTION:\r\n      return state.filter((data, i) => i !== action.id);\r\n    case types.CHANGE_TRANSACTION:\r\n      return state.map(data => ({\r\n        ...data,\r\n        currency_converted: (data.currency * action.cur).toFixed(2)\r\n      }));\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default transactionsReducers;\r\n","import transactionsReducer from \"./reducers\";\r\nexport { default as transactionType } from \"./types\";\r\nexport { default as transactionAction } from \"./actions\";\r\n\r\nexport default transactionsReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport currencyReducer from \"./app/currency\";\r\nimport transactionsReducer from \"./app/transactions\";\r\n\r\nconst rootReducers = combineReducers({\r\n  currency: currencyReducer,\r\n  transactions: transactionsReducer\r\n});\r\n\r\nexport default rootReducers;\r\n","import { createStore } from \"redux\";\r\nimport rootReducers from \"./reducers\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\n\r\nlet store = createStore(rootReducers, composeWithDevTools());\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}